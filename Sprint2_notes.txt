Module_1___________________________________________________________________
Sprint_2___________________________________________________________________
Part_1_____________________________________________________________________

numpy.__version__ - checks numpy version
np.array([1, 2, 3, 4], dtype='float32') - gives array with dtype float
np.zeros(10, dtype=int) - gives array of ten zeros with dtype int
np.ones((3, 5), dtype=float) - gives matrix of ones 3 rows, 5 columns with dtype float
np.full((3, 5), 3.14) - gives matrix of given number (3.14)
np.arrange(0, 20, 2) - create an array filled with a linear sequence starting at 0, ending at 20,
			stepping by 2.
np.linspace(0, 1, 5) - create an array of five values evenly spaced between 0 and 1
np.random.random((3, 3)) - create a 3x3 array of uniformly distributed random values between 0 and 1
np.random.normal(0, 1 (3, 3)) - create a 3x3 array of normally distributed random values with mean
				0 and standard deviation 1
np.random.randint(0, 10, (3, 3)) - create a 3x3 array of random intergers in the interval [0, 10)
.ndim - the number of dimensions
.shape - the size of each dimension
.size - the total size of the array
.dtype - the data type of the array
.itemsize - lists the size (in bytes) of each array element
.nbytes - lists the total size (in bytes) of the array
x[::2] - gets every other element of the array
x[1::2] - gets every other element starting at index 1
x[::-1] - all elements, reversed -> array([5, 4, 3, 2, 1, 0])
x[:2, :3] - gets two rows and three columns in multidimensional array
x[0, :] - first row of multidimensional array
x_sub_copy = x[:2, :2].copy() copies the part of the array without changing original
.reshape() - is used for reshaping arrays
np.concatenate([x, y]) - concatenates x and y arrays to one
np.vstack([x, grid]) - vertically stack the arrays
np.hstack([grid, y]) - horizontally stack the arrays
np.split(x, [3, 5]) - splits the array at given split points (3 and 5)
np.vsplit(grid, [2]) - vertical split
np.hsplit(grid, [2]) - horizontal split
np.absolute(x) - gives absolute value of the array values; also can be np.abs(x)
np.sum(x) - sums values of array
%timeit - gives time of used function
np.min(x) - gives min value of array
np.max(x) - gives max value of array





Part_2_____________________________________________________________________
Part_3_____________________________________________________________________

.str functions - read more
.apply() - can be applied functions to column or whole dataframe

Pandorable way of writing code:
(df.where(df['SUMLEV']==50)
	.dropna()
	.set_index(['STNAME', 'CTYNAME'])
	.rename(columns={'ESTIMATEBASE2010': 'Estimates Base 2010'}))

.groupby('other_column').agg({'some_column':np.nanmean}) - aggregates by selected criteria
.groupby('other_column').agg({'some_column':(np.nanmean, np.nanstd), 'column': np.nanmean}) - aggregates by multiple selected criterias and columns
.groupby.transform() - read more about this
.groupby.filter() - read more about this
.groupby.apply() - can be other functions applied when grouping

df.pivot_table(values='score', index='country', columns='Rank_level', aggfunc=[np.mean, np.max]).head() - creates pivot table

pd.to_datetime() - converts text or numbers to datetime format

.describe() - gets summary of selected df['column'] with mean, count, etc.

.map() -> rews.points.map(lambda p: p - rews_pts_mean) - .map() "maps" one set of values with another set of values


Part_4_____________________________________________________________________

!cat ./movielens/movies.csv - shows file's inside data
!cat ./movielens/movies.csv | wc -l - shows number of objects inside file
!head -5 ./movielens/movies.csv - shows first 5 rows of the file's data

.any() - describes if any of the selected values are True
.all() - describes if all of the selected values are True
.mode() - shows the most repeatative value
df.interpolate() - performs interpolation in the missig values of df
.isnull().any() - used for data cleaning to check if there is nulls in df
df.shape - shows rows and columns of dataframe
df.plot() - methods for plotting
.str.contains('text') - checks if that string value contains the written text
.str.split() - splits the string value
.str.replace('_', '##') - replaces values


.concat(['col_a', 'col_b'], axis=1, join='inner') - connects two dataframes
pd.merge()


Project____________________________________________________________________

Include readme file
More comments
Short description, mini intro
Key column is an object
Danceability ir loudness išskirti
Markdown po kodu

pavadinimai tikslesni turi būti
išvada turi būti, kas bendra tarp top songs.
